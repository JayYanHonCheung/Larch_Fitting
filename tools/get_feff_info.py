# -*- coding: utf-8 -*-
"""
Created on Sat Jan 22 13:51:46 2022

@author: Jay
"""

import os
import pandas as pd

def get_path_info(feff_dir):
    """ Get all scattering path files (.dat). """
    filesdat = feff_output(feff_dir)
    
    if filesdat == None:
        print("files.dat not found, attempting to detect path files.")
        pflist = feff_output_brute(feff_dir)
        return pflist
    
    else:
        print("files.dat found, returning dataframe.")
        df = read_filesdat(filesdat)
        return df
    
def get_path_formula(feff_dir):
    """ Get scattering material chemical formula from files.dat. """
    filesdat = feff_output(feff_dir)
    
    if filesdat == None:
        print("files.dat not found. Return None.")
        return None
    
    else:
        print("files.dat found, returning formula.")
        return read_filesdat_formula(filesdat)

def feff_output(feff_dir):
    """ Check directory for feff output files. """
    
    # Check if feff has generated output files properly.
    flist = [file for file in os.listdir(feff_dir)]
    
    if ('paths.dat' in flist and 'files.dat' in flist and
        'feff0001.dat' in flist and 'feff.inp' in flist):
        return os.path.join(feff_dir, "files.dat")
    
    else:
        print(f"'{feff_dir}' is not a complete Feff calculation. Cannot import Feff calculation.")
        return None

def feff_output_brute(feff_dir):
    """ Search directory for all scattering path files. (feffNNNN.dat) """
    pflist = [file for file in os.listdir(feff_dir) if (file.endswith(".dat") and 
                                                         file.startswith("feff") and 
                                                         len(file) == 12)]
    if len(pflist) == 0:
        print("No feff output path files detected.")
        return None
    else:
        return pflist

def read_filesdat(filesdat):
    """ Read files.dat generated by larch's feffrunner. """
    with open(filesdat, "r") as file:
        lines = file.readlines()
        
    sep_row_count = 0
    for i, line in enumerate(lines):
        if "----------" in line:
            sep_row = i + 1
            sep_row_count += 1
            
    if sep_row_count < 0:
        print("No separator found between headers and data. Check files.dat for confirmation.")
        return None
    elif sep_row_count > 1:
        print("More than 1 separator found between headers and data. Check files.dat for confirmation.")
        return None
    else:
        df = pd.read_fwf(filesdat, skiprows=sep_row)
        return df
    
def read_filesdat_formula(filesdat):
    """ Get formula if scattering material. """
    with open(filesdat, "r") as file:
        lines = file.readlines()
        
    for line in lines:
        if "Formula:" in line:
            formula = line.replace("Formula:", "")
            formula = formula.replace(" ", "")
            formula = formula.replace("\n", "")
            
    return formula